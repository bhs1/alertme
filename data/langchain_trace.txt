Graph saved as 'data/graph.png'.
---GENERATING CODE SOLUTION---
---CHECKING CODE---
---CODE BLOCK CHECK: FAILED---
Code:
import json
def update_http_request(request_params_map, request_data):
    # Update headers
    for header in request_data['headers']:
        if header['name'] in request_params_map:
            header['value'] = request_params_map[header['name']]

    # Update cookies
    for cookie in request_data['cookies']:
        if cookie['name'] in request_params_map:
            cookie['value'] = request_params_map[cookie['name']]

    # Update query string
    for query in request_data['queryString']:
        if query['name'] in request_params_map:
            query['value'] = request_params_map[query['name']]

    # Update post data
    for param in request_data['postData']['params']:
        if param['name'] in request_params_map:
            param['value'] = request_params_map[param['name']]

    return request_data


def extract_input(global_input):
    try:
        data = json.loads(global_input)
        return data['request_params_map'], data['request_data']
    except json.JSONDecodeError:
        # Handle malformed JSON by treating it as a string and attempting to fix it
        fixed_input = global_input.replace("'", '"')
        data = json.loads(fixed_input)
        return data['request_params_map'], data['request_data']


def store_output(updated_request_data):
    global global_output
    global_output = json.dumps(updated_request_data)


# Main execution
request_params_map, request_data = extract_input(global_input)
updated_request_data = update_http_request(request_params_map, request_data)
store_output(updated_request_data)
Test results:
Incorrect submission.
Pass rate: 0.0
Results:
<test case 0 begin >
Failed test case.
            Actual test case output:
            Exception the JSON object must be str, bytes or bytearray, not dict
            Expected test case output:
            {
    "bodySize": 718,
    "method": "POST",
    "url": "https://gtc.clubautomation.com/event/reserve-court-new?ajax=true",
    "httpVersion": "HTTP/2",
    "headers": [
        {
            "name": "Host",
            "value": "gtc.clubautomation.com"
        },
        {
            "name": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0"
        },
        {
            "name": "Accept",
            "value": "*/*"
        },
        {
            "name": "Accept-Language",
            "value": "en-US,en;q=0.5"
        },
        {
            "name": "Accept-Encoding",
            "value": "gzip, deflate, br"
        },
        {
            "name": "Referer",
            "value": "https://gtc.clubautomation.com/event/reserve-court-new"
        },
        {
            "name": "Content-Type",
            "value": "application/x-www-form-urlencoded; charset=UTF-8"
        },
        {
            "name": "X-Requested-With",
            "value": "XMLHttpRequest"
        },
        {
            "name": "X-INSTANA-T",
            "value": "a2dff8e1914fbae9"
        },
        {
            "name": "X-INSTANA-S",
            "value": "a2dff8e1914fbae9"
        },
        {
            "name": "X-INSTANA-L",
            "value": "1,correlationType=web;correlationId=a2dff8e1914fbae9"
        },
        {
            "name": "Content-Length",
            "value": "718"
        },
        {
            "name": "Origin",
            "value": "https://gtc.clubautomation.com"
        },
        {
            "name": "Connection",
            "value": "keep-alive"
        },
        {
            "name": "Cookie",
            "value": "PHPSESSID=ultj1akb8cjhknu2l8k36e1f8a; __cf_bm=TEfpykH4okEn1ZFUaJhu2yWucy9.BBquJeJJIxNZJY0-1715294372-1.0.1.1-joUbR56NyjIYjmyVExGoLwh5O4gUVqh9fkNGTLsBOCQOh1hQgyjH8AnrnyVREw61qjJ2xnA4zJymkneBgary1g; SessionExpirationTime=1715323192; isLoggedIn=1"
        },
        {
            "name": "Sec-Fetch-Dest",
            "value": "empty"
        },
        {
            "name": "Sec-Fetch-Mode",
            "value": "cors"
        },
        {
            "name": "Sec-Fetch-Site",
            "value": "same-origin"
        },
        {
            "name": "TE",
            "value": "trailers"
        }
    ],
    "cookies": [
        {
            "name": "PHPSESSID",
            "value": "ultj1akb8cjhknu2l8k36e1f8a"
        },
        {
            "name": "__cf_bm",
            "value": "TEfpykH4okEn1ZFUaJhu2yWucy9.BBquJeJJIxNZJY0-1715294372-1.0.1.1-joUbR56NyjIYjmyVExGoLwh5O4gUVqh9fkNGTLsBOCQOh1hQgyjH8AnrnyVREw61qjJ2xnA4zJymkneBgary1g"
        },
        {
            "name": "SessionExpirationTime",
            "value": "1715323192"
        },
        {
            "name": "isLoggedIn",
            "value": "1"
        }
    ],
    "queryString": [
        {
            "name": "ajax",
            "value": "true"
        }
    ],
    "headersSize": 966,
    "postData": {
        "mimeType": "application/x-www-form-urlencoded",
        "params": [
            {
                "name": "reservation-list-page",
                "value": "1"
            },
            {
                "name": "user_id",
                "value": "25397"
            },
            {
                "name": "event_member_token_reserve_court",
                "value": "21f55e9e90592d561f192cc2c86e019b"
            },
            {
                "name": "current_guest_count",
                "value": "0"
            },
            {
                "name": "component",
                "value": "2"
            },
            {
                "name": "club",
                "value": "-1"
            },
            {
                "name": "location",
                "value": "-1"
            },
            {
                "name": "surface",
                "value": "-1"
            },
            {
                "name": "host",
                "value": "25397"
            },
            {
                "name": "add-new-child-to-guest_1",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_2",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_3",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_4",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_5",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_6",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_7",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_8",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_9",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_10",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_11",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_12",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_13",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_14",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_15",
                "value": ""
            },
            {
                "name": "date",
                "value": "06/25/2024"
            },
            {
                "name": "interval",
                "value": "30"
            },
            {
                "name": "timeFrom",
                "value": "0"
            },
            {
                "name": "timeTo",
                "value": "24"
            },
            {
                "name": "time-reserve",
                "value": ""
            },
            {
                "name": "location-reserve",
                "value": ""
            },
            {
                "name": "surface-reserve",
                "value": ""
            },
            {
                "name": "courtsnotavailable",
                "value": ""
            },
            {
                "name": "join-waitlist-case",
                "value": "0"
            }
        ]
    }
}


            Debug test case output:
            
</test case>
---DECISION: RE-TRY SOLUTION---
---REFLECTING ON ERRORS, DEBUG STATEMENTS, and FORMULATING IMPROVEMENT PLAN---
Context:
    Previous Corrections, Reflections and Code diffs:

 Correction Summary: Created a function to update HTTP request string based on provided parameters. The function extracts the input from a global variable, updates the request data, and stores the result in another global variable.
Imports:
import json
Code:
def update_http_request(request_params_map, request_data):
    # Update headers
    for header in request_data['headers']:
        if header['name'] in request_params_map:
            header['value'] = request_params_map[header['name']]

    # Update cookies
    for cookie in request_data['cookies']:
        if cookie['name'] in request_params_map:
            cookie['value'] = request_params_map[cookie['name']]

    # Update query string
    for query in request_data['queryString']:
        if query['name'] in request_params_map:
            query['value'] = request_params_map[query['name']]

    # Update post data
    for param in request_data['postData']['params']:
        if param['name'] in request_params_map:
            param['value'] = request_params_map[param['name']]

    return request_data


def extract_input(global_input):
    try:
        data = json.loads(global_input)
        return data['request_params_map'], data['request_data']
    except json.JSONDecodeError:
        # Handle malformed JSON by treating it as a string and attempting to fix it
        fixed_input = global_input.replace("'", '"')
        data = json.loads(fixed_input)
        return data['request_params_map'], data['request_data']


def store_output(updated_request_data):
    global global_output
    global_output = json.dumps(updated_request_data)


# Main execution
request_params_map, request_data = extract_input(global_input)
updated_request_data = update_http_request(request_params_map, request_data)
store_output(updated_request_data)
        
---GENERATING CODE SOLUTION---
--------- Rewriting code with print statements -----------
Generating solution using prompt:
We just gave you this prompt:

 (1) Determine what went wrong in each of the following test results: Incorrect submission.
Pass rate: 0.0
Results:
<test case 0 begin >
Failed test case.
            Actual test case output:
            Exception the JSON object must be str, bytes or bytearray, not dict
            Expected test case output:
            {
    "bodySize": 718,
    "method": "POST",
    "url": "https://gtc.clubautomation.com/event/reserve-court-new?ajax=true",
    "httpVersion": "HTTP/2",
    "headers": [
        {
            "name": "Host",
            "value": "gtc.clubautomation.com"
        },
        {
            "name": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0"
        },
        {
            "name": "Accept",
            "value": "*/*"
        },
        {
            "name": "Accept-Language",
            "value": "en-US,en;q=0.5"
        },
        {
            "name": "Accept-Encoding",
            "value": "gzip, deflate, br"
        },
        {
            "name": "Referer",
            "value": "https://gtc.clubautomation.com/event/reserve-court-new"
        },
        {
            "name": "Content-Type",
            "value": "application/x-www-form-urlencoded; charset=UTF-8"
        },
        {
            "name": "X-Requested-With",
            "value": "XMLHttpRequest"
        },
        {
            "name": "X-INSTANA-T",
            "value": "a2dff8e1914fbae9"
        },
        {
            "name": "X-INSTANA-S",
            "value": "a2dff8e1914fbae9"
        },
        {
            "name": "X-INSTANA-L",
            "value": "1,correlationType=web;correlationId=a2dff8e1914fbae9"
        },
        {
            "name": "Content-Length",
            "value": "718"
        },
        {
            "name": "Origin",
            "value": "https://gtc.clubautomation.com"
        },
        {
            "name": "Connection",
            "value": "keep-alive"
        },
        {
            "name": "Cookie",
            "value": "PHPSESSID=ultj1akb8cjhknu2l8k36e1f8a; __cf_bm=TEfpykH4okEn1ZFUaJhu2yWucy9.BBquJeJJIxNZJY0-1715294372-1.0.1.1-joUbR56NyjIYjmyVExGoLwh5O4gUVqh9fkNGTLsBOCQOh1hQgyjH8AnrnyVREw61qjJ2xnA4zJymkneBgary1g; SessionExpirationTime=1715323192; isLoggedIn=1"
        },
        {
            "name": "Sec-Fetch-Dest",
            "value": "empty"
        },
        {
            "name": "Sec-Fetch-Mode",
            "value": "cors"
        },
        {
            "name": "Sec-Fetch-Site",
            "value": "same-origin"
        },
        {
            "name": "TE",
            "value": "trailers"
        }
    ],
    "cookies": [
        {
            "name": "PHPSESSID",
            "value": "ultj1akb8cjhknu2l8k36e1f8a"
        },
        {
            "name": "__cf_bm",
            "value": "TEfpykH4okEn1ZFUaJhu2yWucy9.BBquJeJJIxNZJY0-1715294372-1.0.1.1-joUbR56NyjIYjmyVExGoLwh5O4gUVqh9fkNGTLsBOCQOh1hQgyjH8AnrnyVREw61qjJ2xnA4zJymkneBgary1g"
        },
        {
            "name": "SessionExpirationTime",
            "value": "1715323192"
        },
        {
            "name": "isLoggedIn",
            "value": "1"
        }
    ],
    "queryString": [
        {
            "name": "ajax",
            "value": "true"
        }
    ],
    "headersSize": 966,
    "postData": {
        "mimeType": "application/x-www-form-urlencoded",
        "params": [
            {
                "name": "reservation-list-page",
                "value": "1"
            },
            {
                "name": "user_id",
                "value": "25397"
            },
            {
                "name": "event_member_token_reserve_court",
                "value": "21f55e9e90592d561f192cc2c86e019b"
            },
            {
                "name": "current_guest_count",
                "value": "0"
            },
            {
                "name": "component",
                "value": "2"
            },
            {
                "name": "club",
                "value": "-1"
            },
            {
                "name": "location",
                "value": "-1"
            },
            {
                "name": "surface",
                "value": "-1"
            },
            {
                "name": "host",
                "value": "25397"
            },
            {
                "name": "add-new-child-to-guest_1",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_2",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_3",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_4",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_5",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_6",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_7",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_8",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_9",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_10",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_11",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_12",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_13",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_14",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_15",
                "value": ""
            },
            {
                "name": "date",
                "value": "06/25/2024"
            },
            {
                "name": "interval",
                "value": "30"
            },
            {
                "name": "timeFrom",
                "value": "0"
            },
            {
                "name": "timeTo",
                "value": "24"
            },
            {
                "name": "time-reserve",
                "value": ""
            },
            {
                "name": "location-reserve",
                "value": ""
            },
            {
                "name": "surface-reserve",
                "value": ""
            },
            {
                "name": "courtsnotavailable",
                "value": ""
            },
            {
                "name": "join-waitlist-case",
                "value": "0"
            }
        ]
    }
}


            Debug test case output:
            
</test case>.
Explain for each failing test case how does the actual output differ from the expected output (be very specific here, feel free to take multiple sentences)? And why do you think that is? If useful, consider the Debug Output when reasoning about your response.
    
    Note: To save resource, try to avoid printing entire HTTP requests or json, instead only print parts that may be useful for debugging     you may wish to summarize the structure in plain text the parts that you choose leave out.
     
    (2) Construct an improvement plan to fix the test failures. When formulating this plan, observe the previous solutions
    shown above and try not to repeat fixes that we already know do not lead to a fix.
        
    (3) Sketch out the specific pseudocode of the fixes you plan to implement. Feel free to include actual code snipits. 

 and as a result of the above prompt you gave this relfection summary:

 ### Analysis of the Problem

#### (1) Explanation of the Failing Test Case

**Error Message:**
```
Exception the JSON object must be str, bytes or bytearray, not dict
```

**Actual Output:**
```
Exception the JSON object must be str, bytes or bytearray, not dict
```

**Expected Output:**
```json
{
    "bodySize": 718,
    "method": "POST",
    "url": "https://gtc.clubautomation.com/event/reserve-court-new?ajax=true",
    "httpVersion": "HTTP/2",
    "headers": [
        {
            "name": "Host",
            "value": "gtc.clubautomation.com"
        },
        {
            "name": "User-Agent",
            "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:125.0) Gecko/20100101 Firefox/125.0"
        },
        {
            "name": "Accept",
            "value": "*/*"
        },
        {
            "name": "Accept-Language",
            "value": "en-US,en;q=0.5"
        },
        {
            "name": "Accept-Encoding",
            "value": "gzip, deflate, br"
        },
        {
            "name": "Referer",
            "value": "https://gtc.clubautomation.com/event/reserve-court-new"
        },
        {
            "name": "Content-Type",
            "value": "application/x-www-form-urlencoded; charset=UTF-8"
        },
        {
            "name": "X-Requested-With",
            "value": "XMLHttpRequest"
        },
        {
            "name": "X-INSTANA-T",
            "value": "a2dff8e1914fbae9"
        },
        {
            "name": "X-INSTANA-S",
            "value": "a2dff8e1914fbae9"
        },
        {
            "name": "X-INSTANA-L",
            "value": "1,correlationType=web;correlationId=a2dff8e1914fbae9"
        },
        {
            "name": "Content-Length",
            "value": "718"
        },
        {
            "name": "Origin",
            "value": "https://gtc.clubautomation.com"
        },
        {
            "name": "Connection",
            "value": "keep-alive"
        },
        {
            "name": "Cookie",
            "value": "PHPSESSID=ultj1akb8cjhknu2l8k36e1f8a; __cf_bm=TEfpykH4okEn1ZFUaJhu2yWucy9.BBquJeJJIxNZJY0-1715294372-1.0.1.1-joUbR56NyjIYjmyVExGoLwh5O4gUVqh9fkNGTLsBOCQOh1hQgyjH8AnrnyVREw61qjJ2xnA4zJymkneBgary1g; SessionExpirationTime=1715323192; isLoggedIn=1"
        },
        {
            "name": "Sec-Fetch-Dest",
            "value": "empty"
        },
        {
            "name": "Sec-Fetch-Mode",
            "value": "cors"
        },
        {
            "name": "Sec-Fetch-Site",
            "value": "same-origin"
        },
        {
            "name": "TE",
            "value": "trailers"
        }
    ],
    "cookies": [
        {
            "name": "PHPSESSID",
            "value": "ultj1akb8cjhknu2l8k36e1f8a"
        },
        {
            "name": "__cf_bm",
            "value": "TEfpykH4okEn1ZFUaJhu2yWucy9.BBquJeJJIxNZJY0-1715294372-1.0.1.1-joUbR56NyjIYjmyVExGoLwh5O4gUVqh9fkNGTLsBOCQOh1hQgyjH8AnrnyVREw61qjJ2xnA4zJymkneBgary1g"
        },
        {
            "name": "SessionExpirationTime",
            "value": "1715323192"
        },
        {
            "name": "isLoggedIn",
            "value": "1"
        }
    ],
    "queryString": [
        {
            "name": "ajax",
            "value": "true"
        }
    ],
    "headersSize": 966,
    "postData": {
        "mimeType": "application/x-www-form-urlencoded",
        "params": [
            {
                "name": "reservation-list-page",
                "value": "1"
            },
            {
                "name": "user_id",
                "value": "25397"
            },
            {
                "name": "event_member_token_reserve_court",
                "value": "21f55e9e90592d561f192cc2c86e019b"
            },
            {
                "name": "current_guest_count",
                "value": "0"
            },
            {
                "name": "component",
                "value": "2"
            },
            {
                "name": "club",
                "value": "-1"
            },
            {
                "name": "location",
                "value": "-1"
            },
            {
                "name": "surface",
                "value": "-1"
            },
            {
                "name": "host",
                "value": "25397"
            },
            {
                "name": "add-new-child-to-guest_1",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_2",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_3",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_4",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_5",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_6",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_7",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_8",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_9",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_10",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_11",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_12",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_13",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_14",
                "value": ""
            },
            {
                "name": "add-new-child-to-guest_15",
                "value": ""
            },
            {
                "name": "date",
                "value": "06/25/2024"
            },
            {
                "name": "interval",
                "value": "30"
            },
            {
                "name": "timeFrom",
                "value": "0"
            },
            {
                "name": "timeTo",
                "value": "24"
            },
            {
                "name": "time-reserve",
                "value": ""
            },
            {
                "name": "location-reserve",
                "value": ""
            },
            {
                "name": "surface-reserve",
                "value": ""
            },
            {
                "name": "courtsnotavailable",
                "value": ""
            },
            {
                "name": "join-waitlist-case",
                "value": "0"
            }
        ]
    }
}
```

**Reason for Failure:**
The error message indicates that the `json.loads` function was called with a dictionary instead of a string. This suggests that the input to the `extract_input` function was already a dictionary, not a JSON string.

### Improvement Plan

#### (2) Improvement Plan

1. **Check Input Type:**
   - Ensure that the input to the `extract_input` function is a string. If it's already a dictionary, skip the JSON parsing step.

2. **Refactor `extract_input` Function:**
   - Modify the `extract_input` function to handle both string and dictionary inputs gracefully.

3. **Update `store_output` Function:**
   - Ensure that the `store_output` function correctly stores the updated request data in the global variable.

4. **Add Error Handling:**
   - Add error handling to manage unexpected input types and provide meaningful error messages.

### Pseudocode and Code Snippets

#### (3) Pseudocode

1. **Update `extract_input` Function:**
   - Check if the input is a string.
   - If it is, parse it as JSON.
   - If it's already a dictionary, return it directly.

2. **Update `store_output` Function:**
   - Convert the updated request data to a JSON string and store it in the global variable.

#### Updated Code

```python
import json

def update_http_request(request_params_map, request_data):
    # Update headers
    for header in request_data['headers']:
        if header['name'] in request_params_map:
            header['value'] = request_params_map[header['name']]

    # Update cookies
    for cookie in request_data['cookies']:
        if cookie['name'] in request_params_map:
            cookie['value'] = request_params_map[cookie['name']]

    # Update query string
    for query in request_data['queryString']:
        if query['name'] in request_params_map:
            query['value'] = request_params_map[query['name']]

    # Update post data
    for param in request_data['postData']['params']:
        if param['name'] in request_params_map:
            param['value'] = request_params_map[param['name']]

    return request_data

def extract_input(global_input):
    if isinstance(global_input, str):
        try:
            data = json.loads(global_input)
        except json.JSONDecodeError:
            # Handle malformed JSON by treating it as a string and attempting to fix it
            fixed_input = global_input.replace("'", '"')
            data = json.loads(fixed_input)
    elif isinstance(global_input, dict):
        data = global_input
    else:
        raise ValueError("Unsupported input type")
    
    return data['request_params_map'], data['request_data']

def store_output(updated_request_data):
    global global_output
    global_output = json.dumps(updated_request_data)

# Main execution
request_params_map, request_data = extract_input(global_input)
updated_request_data = update_http_request(request_params_map, request_data)
store_output(updated_request_data)
```

### Summary

- **Issue Identified:** The input to the `extract_input` function was already a dictionary, causing a type error when attempting to parse it as JSON.
- **Solution:** Modify the `extract_input` function to handle both string and dictionary inputs, ensuring robust error handling and correct data processing.
- **Implementation:** Update the `extract_input` and `store_output` functions to handle the input and output correctly, ensuring the function works as expected.

Main directive: Rewrite the code to fix the test cases. Be sure to follow the plan in the reflection summary.
        
IMPORTANT: Also, print out intermediate variable names for debugging purposes. Instead of print() append to global variable debug_output. At first debug_output can be simple, but as you fail a test more times, you should add more and more details and variables to debug_output until we find the issue. Remember to define "global debug_output" at the top of any scope that updates debug_output.
                 
---CHECKING CODE---
Comparing as JSON objects: Match
=========== CODE BLOCK CHECK: SUCCEEDED in 2 iterations ===========
---DECISION: FINISH---
